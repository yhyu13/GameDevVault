(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["npm.jstz"],{

/***/ "8i2W":
/*!****************************************!*\
  !*** ./node_modules/jstz/dist/jstz.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root) {\n  /*global exports, Intl*/\n\n  /**\n   * This script gives you the zone info key representing your device's time zone setting.\n   *\n   * @name jsTimezoneDetect\n   * @version 1.0.6\n   * @author Jon Nylander\n   * @license MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt\n   *\n   * For usage and examples, visit:\n   * http://pellepim.bitbucket.org/jstz/\n   *\n   * Copyright (c) Jon Nylander\n   */\n\n  /**\n   * Namespace to hold all the code for timezone detection.\n   */\n  var jstz = function () {\n    'use strict';\n\n    var HEMISPHERE_SOUTH = 's',\n        consts = {\n      DAY: 86400000,\n      HOUR: 3600000,\n      MINUTE: 60000,\n      SECOND: 1000,\n      BASELINE_YEAR: 2014,\n      MAX_SCORE: 864000000,\n      // 10 days\n      AMBIGUITIES: {\n        'America/Denver': ['America/Mazatlan'],\n        'Europe/London': ['Africa/Casablanca'],\n        'America/Chicago': ['America/Mexico_City'],\n        'America/Asuncion': ['America/Campo_Grande', 'America/Santiago'],\n        'America/Montevideo': ['America/Sao_Paulo', 'America/Santiago'],\n        // Europe/Minsk should not be in this list... but Windows.\n        'Asia/Beirut': ['Asia/Amman', 'Asia/Jerusalem', 'Europe/Helsinki', 'Asia/Damascus', 'Africa/Cairo', 'Asia/Gaza', 'Europe/Minsk'],\n        'Pacific/Auckland': ['Pacific/Fiji'],\n        'America/Los_Angeles': ['America/Santa_Isabel'],\n        'America/New_York': ['America/Havana'],\n        'America/Halifax': ['America/Goose_Bay'],\n        'America/Godthab': ['America/Miquelon'],\n        'Asia/Dubai': ['Asia/Yerevan'],\n        'Asia/Jakarta': ['Asia/Krasnoyarsk'],\n        'Asia/Shanghai': ['Asia/Irkutsk', 'Australia/Perth'],\n        'Australia/Sydney': ['Australia/Lord_Howe'],\n        'Asia/Tokyo': ['Asia/Yakutsk'],\n        'Asia/Dhaka': ['Asia/Omsk'],\n        // In the real world Yerevan is not ambigous for Baku... but Windows.\n        'Asia/Baku': ['Asia/Yerevan'],\n        'Australia/Brisbane': ['Asia/Vladivostok'],\n        'Pacific/Noumea': ['Asia/Vladivostok'],\n        'Pacific/Majuro': ['Asia/Kamchatka', 'Pacific/Fiji'],\n        'Pacific/Tongatapu': ['Pacific/Apia'],\n        'Asia/Baghdad': ['Europe/Minsk', 'Europe/Moscow'],\n        'Asia/Karachi': ['Asia/Yekaterinburg'],\n        'Africa/Johannesburg': ['Asia/Gaza', 'Africa/Cairo']\n      }\n    },\n\n    /**\n     * Gets the offset in minutes from UTC for a certain date.\n     * @param {Date} date\n     * @returns {Number}\n     */\n    get_date_offset = function get_date_offset(date) {\n      var offset = -date.getTimezoneOffset();\n      return offset !== null ? offset : 0;\n    },\n\n    /**\n     * This function does some basic calculations to create information about\n     * the user's timezone. It uses REFERENCE_YEAR as a solid year for which\n     * the script has been tested rather than depend on the year set by the\n     * client device.\n     *\n     * Returns a key that can be used to do lookups in jstz.olson.timezones.\n     * eg: \"720,1,2\".\n     *\n     * @returns {String}\n     */\n    lookup_key = function lookup_key() {\n      var january_offset = get_date_offset(new Date(consts.BASELINE_YEAR, 0, 2)),\n          june_offset = get_date_offset(new Date(consts.BASELINE_YEAR, 5, 2)),\n          diff = january_offset - june_offset;\n\n      if (diff < 0) {\n        return january_offset + \",1\";\n      } else if (diff > 0) {\n        return june_offset + \",1,\" + HEMISPHERE_SOUTH;\n      }\n\n      return january_offset + \",0\";\n    },\n\n    /**\n     * Tries to get the time zone key directly from the operating system for those\n     * environments that support the ECMAScript Internationalization API.\n     */\n    get_from_internationalization_api = function get_from_internationalization_api() {\n      var format, timezone;\n\n      if (typeof Intl === \"undefined\" || typeof Intl.DateTimeFormat === \"undefined\") {\n        return;\n      }\n\n      format = Intl.DateTimeFormat();\n\n      if (typeof format === \"undefined\" || typeof format.resolvedOptions === \"undefined\") {\n        return;\n      }\n\n      timezone = format.resolvedOptions().timeZone;\n\n      if (timezone && (timezone.indexOf(\"/\") > -1 || timezone === 'UTC') && timezone.indexOf(\"Etc\") != 0) {\n        return timezone;\n      }\n    },\n\n    /**\n     * Starting point for getting all the DST rules for a specific year\n     * for the current timezone (as described by the client system).\n     *\n     * Returns an object with start and end attributes, or false if no\n     * DST rules were found for the year.\n     *\n     * @param year\n     * @returns {Object} || {Boolean}\n     */\n    dst_dates = function dst_dates(year) {\n      var yearstart = new Date(year, 0, 1, 0, 0, 1, 0).getTime();\n      var yearend = new Date(year, 12, 31, 23, 59, 59).getTime();\n      var current = yearstart;\n      var offset = new Date(current).getTimezoneOffset();\n      var dst_start = null;\n      var dst_end = null;\n\n      while (current < yearend - 86400000) {\n        var dateToCheck = new Date(current);\n        var dateToCheckOffset = dateToCheck.getTimezoneOffset();\n\n        if (dateToCheckOffset !== offset) {\n          if (dateToCheckOffset < offset) {\n            dst_start = dateToCheck;\n          }\n\n          if (dateToCheckOffset > offset) {\n            dst_end = dateToCheck;\n          }\n\n          offset = dateToCheckOffset;\n        }\n\n        current += 86400000;\n      }\n\n      if (dst_start && dst_end) {\n        return {\n          s: find_dst_fold(dst_start).getTime(),\n          e: find_dst_fold(dst_end).getTime()\n        };\n      }\n\n      return false;\n    },\n\n    /**\n     * Probably completely unnecessary function that recursively finds the\n     * exact (to the second) time when a DST rule was changed.\n     *\n     * @param a_date - The candidate Date.\n     * @param padding - integer specifying the padding to allow around the candidate\n     *                  date for finding the fold.\n     * @param iterator - integer specifying how many milliseconds to iterate while\n     *                   searching for the fold.\n     *\n     * @returns {Date}\n     */\n    find_dst_fold = function find_dst_fold(a_date, padding, iterator) {\n      if (typeof padding === 'undefined') {\n        padding = consts.DAY;\n        iterator = consts.HOUR;\n      }\n\n      var date_start = new Date(a_date.getTime() - padding).getTime();\n      var date_end = a_date.getTime() + padding;\n      var offset = new Date(date_start).getTimezoneOffset();\n      var current = date_start;\n      var dst_change = null;\n\n      while (current < date_end - iterator) {\n        var dateToCheck = new Date(current);\n        var dateToCheckOffset = dateToCheck.getTimezoneOffset();\n\n        if (dateToCheckOffset !== offset) {\n          dst_change = dateToCheck;\n          break;\n        }\n\n        current += iterator;\n      }\n\n      if (padding === consts.DAY) {\n        return find_dst_fold(dst_change, consts.HOUR, consts.MINUTE);\n      }\n\n      if (padding === consts.HOUR) {\n        return find_dst_fold(dst_change, consts.MINUTE, consts.SECOND);\n      }\n\n      return dst_change;\n    },\n        windows7_adaptations = function windows7_adaptions(rule_list, preliminary_timezone, score, sample) {\n      if (score !== 'N/A') {\n        return score;\n      }\n\n      if (preliminary_timezone === 'Asia/Beirut') {\n        if (sample.name === 'Africa/Cairo') {\n          if (rule_list[6].s === 1398376800000 && rule_list[6].e === 1411678800000) {\n            return 0;\n          }\n        }\n\n        if (sample.name === 'Asia/Jerusalem') {\n          if (rule_list[6].s === 1395964800000 && rule_list[6].e === 1411858800000) {\n            return 0;\n          }\n        }\n      } else if (preliminary_timezone === 'America/Santiago') {\n        if (sample.name === 'America/Asuncion') {\n          if (rule_list[6].s === 1412481600000 && rule_list[6].e === 1397358000000) {\n            return 0;\n          }\n        }\n\n        if (sample.name === 'America/Campo_Grande') {\n          if (rule_list[6].s === 1413691200000 && rule_list[6].e === 1392519600000) {\n            return 0;\n          }\n        }\n      } else if (preliminary_timezone === 'America/Montevideo') {\n        if (sample.name === 'America/Sao_Paulo') {\n          if (rule_list[6].s === 1413687600000 && rule_list[6].e === 1392516000000) {\n            return 0;\n          }\n        }\n      } else if (preliminary_timezone === 'Pacific/Auckland') {\n        if (sample.name === 'Pacific/Fiji') {\n          if (rule_list[6].s === 1414245600000 && rule_list[6].e === 1396101600000) {\n            return 0;\n          }\n        }\n      }\n\n      return score;\n    },\n\n    /**\n     * Takes the DST rules for the current timezone, and proceeds to find matches\n     * in the jstz.olson.dst_rules.zones array.\n     *\n     * Compares samples to the current timezone on a scoring basis.\n     *\n     * Candidates are ruled immediately if either the candidate or the current zone\n     * has a DST rule where the other does not.\n     *\n     * Candidates are ruled out immediately if the current zone has a rule that is\n     * outside the DST scope of the candidate.\n     *\n     * Candidates are included for scoring if the current zones rules fall within the\n     * span of the samples rules.\n     *\n     * Low score is best, the score is calculated by summing up the differences in DST\n     * rules and if the consts.MAX_SCORE is overreached the candidate is ruled out.\n     *\n     * Yah follow? :)\n     *\n     * @param rule_list\n     * @param preliminary_timezone\n     * @returns {*}\n     */\n    best_dst_match = function best_dst_match(rule_list, preliminary_timezone) {\n      var score_sample = function score_sample(sample) {\n        var score = 0;\n\n        for (var j = 0; j < rule_list.length; j++) {\n          // Both sample and current time zone report DST during the year.\n          if (!!sample.rules[j] && !!rule_list[j]) {\n            // The current time zone's DST rules are inside the sample's. Include.\n            if (rule_list[j].s >= sample.rules[j].s && rule_list[j].e <= sample.rules[j].e) {\n              score = 0;\n              score += Math.abs(rule_list[j].s - sample.rules[j].s);\n              score += Math.abs(sample.rules[j].e - rule_list[j].e); // The current time zone's DST rules are outside the sample's. Discard.\n            } else {\n              score = 'N/A';\n              break;\n            } // The max score has been reached. Discard.\n\n\n            if (score > consts.MAX_SCORE) {\n              score = 'N/A';\n              break;\n            }\n          }\n        }\n\n        score = windows7_adaptations(rule_list, preliminary_timezone, score, sample);\n        return score;\n      };\n\n      var scoreboard = {};\n      var dst_zones = jstz.olson.dst_rules.zones;\n      var dst_zones_length = dst_zones.length;\n      var ambiguities = consts.AMBIGUITIES[preliminary_timezone];\n\n      for (var i = 0; i < dst_zones_length; i++) {\n        var sample = dst_zones[i];\n        var score = score_sample(dst_zones[i]);\n\n        if (score !== 'N/A') {\n          scoreboard[sample.name] = score;\n        }\n      }\n\n      for (var tz in scoreboard) {\n        if (scoreboard.hasOwnProperty(tz)) {\n          for (var j = 0; j < ambiguities.length; j++) {\n            if (ambiguities[j] === tz) {\n              return tz;\n            }\n          }\n        }\n      }\n\n      return preliminary_timezone;\n    },\n\n    /**\n     * Takes the preliminary_timezone as detected by lookup_key().\n     *\n     * Builds up the current timezones DST rules for the years defined\n     * in the jstz.olson.dst_rules.years array.\n     *\n     * If there are no DST occurences for those years, immediately returns\n     * the preliminary timezone. Otherwise proceeds and tries to solve\n     * ambiguities.\n     *\n     * @param preliminary_timezone\n     * @returns {String} timezone_name\n     */\n    get_by_dst = function get_by_dst(preliminary_timezone) {\n      var get_rules = function get_rules() {\n        var rule_list = [];\n\n        for (var i = 0; i < jstz.olson.dst_rules.years.length; i++) {\n          var year_rules = dst_dates(jstz.olson.dst_rules.years[i]);\n          rule_list.push(year_rules);\n        }\n\n        return rule_list;\n      };\n\n      var check_has_dst = function check_has_dst(rules) {\n        for (var i = 0; i < rules.length; i++) {\n          if (rules[i] !== false) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      var rules = get_rules();\n      var has_dst = check_has_dst(rules);\n\n      if (has_dst) {\n        return best_dst_match(rules, preliminary_timezone);\n      }\n\n      return preliminary_timezone;\n    },\n\n    /**\n     * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.\n     *\n     * Returns an object with one function \".name()\"\n     *\n     * @returns Object\n     */\n    determine = function determine() {\n      var preliminary_tz = get_from_internationalization_api();\n\n      if (!preliminary_tz) {\n        preliminary_tz = jstz.olson.timezones[lookup_key()];\n\n        if (typeof consts.AMBIGUITIES[preliminary_tz] !== 'undefined') {\n          preliminary_tz = get_by_dst(preliminary_tz);\n        }\n      }\n\n      return {\n        name: function () {\n          return preliminary_tz;\n        },\n        stdTimezoneOffset: function () {\n          // negative to match what (new Date).getTimezoneOffset() will return\n          return -lookup_key().split(',')[0];\n        },\n        timezoneOffset: function () {\n          // negative to match what (new Date).getTimezoneOffset() will return\n          return -get_date_offset(new Date());\n        }\n      };\n    };\n\n    return {\n      determine: determine\n    };\n  }();\n\n  jstz.olson = jstz.olson || {};\n  /**\n   * The keys in this dictionary are comma separated as such:\n   *\n   * First the offset compared to UTC time in minutes.\n   *\n   * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it\n   * does.\n   *\n   * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,\n   * only interesting for timezones with DST.\n   *\n   * The mapped arrays is used for constructing the jstz.TimeZone object from within\n   * jstz.determine();\n   */\n\n  jstz.olson.timezones = {\n    '-720,0': 'Etc/GMT+12',\n    '-660,0': 'Pacific/Pago_Pago',\n    '-660,1,s': 'Pacific/Apia',\n    // Why? Because windows... cry!\n    '-600,1': 'America/Adak',\n    '-600,0': 'Pacific/Honolulu',\n    '-570,0': 'Pacific/Marquesas',\n    '-540,0': 'Pacific/Gambier',\n    '-540,1': 'America/Anchorage',\n    '-480,1': 'America/Los_Angeles',\n    '-480,0': 'Pacific/Pitcairn',\n    '-420,0': 'America/Phoenix',\n    '-420,1': 'America/Denver',\n    '-360,0': 'America/Guatemala',\n    '-360,1': 'America/Chicago',\n    '-360,1,s': 'Pacific/Easter',\n    '-300,0': 'America/Bogota',\n    '-300,1': 'America/New_York',\n    '-270,0': 'America/Caracas',\n    '-240,1': 'America/Halifax',\n    '-240,0': 'America/Santo_Domingo',\n    '-240,1,s': 'America/Asuncion',\n    '-210,1': 'America/St_Johns',\n    '-180,1': 'America/Godthab',\n    '-180,0': 'America/Argentina/Buenos_Aires',\n    '-180,1,s': 'America/Montevideo',\n    '-120,0': 'America/Noronha',\n    '-120,1': 'America/Noronha',\n    '-60,1': 'Atlantic/Azores',\n    '-60,0': 'Atlantic/Cape_Verde',\n    '0,0': 'UTC',\n    '0,1': 'Europe/London',\n    '60,1': 'Europe/Berlin',\n    '60,0': 'Africa/Lagos',\n    '60,1,s': 'Africa/Windhoek',\n    '120,1': 'Asia/Beirut',\n    '120,0': 'Africa/Johannesburg',\n    '180,0': 'Asia/Baghdad',\n    '180,1': 'Europe/Moscow',\n    '210,1': 'Asia/Tehran',\n    '240,0': 'Asia/Dubai',\n    '240,1': 'Asia/Baku',\n    '270,0': 'Asia/Kabul',\n    '300,1': 'Asia/Yekaterinburg',\n    '300,0': 'Asia/Karachi',\n    '330,0': 'Asia/Kolkata',\n    '345,0': 'Asia/Kathmandu',\n    '360,0': 'Asia/Dhaka',\n    '360,1': 'Asia/Omsk',\n    '390,0': 'Asia/Rangoon',\n    '420,1': 'Asia/Krasnoyarsk',\n    '420,0': 'Asia/Jakarta',\n    '480,0': 'Asia/Shanghai',\n    '480,1': 'Asia/Irkutsk',\n    '525,0': 'Australia/Eucla',\n    '525,1,s': 'Australia/Eucla',\n    '540,1': 'Asia/Yakutsk',\n    '540,0': 'Asia/Tokyo',\n    '570,0': 'Australia/Darwin',\n    '570,1,s': 'Australia/Adelaide',\n    '600,0': 'Australia/Brisbane',\n    '600,1': 'Asia/Vladivostok',\n    '600,1,s': 'Australia/Sydney',\n    '630,1,s': 'Australia/Lord_Howe',\n    '660,1': 'Asia/Kamchatka',\n    '660,0': 'Pacific/Noumea',\n    '690,0': 'Pacific/Norfolk',\n    '720,1,s': 'Pacific/Auckland',\n    '720,0': 'Pacific/Majuro',\n    '765,1,s': 'Pacific/Chatham',\n    '780,0': 'Pacific/Tongatapu',\n    '780,1,s': 'Pacific/Apia',\n    '840,0': 'Pacific/Kiritimati'\n  };\n  /* Build time: 2015-11-02 13:01:00Z Build by invoking python utilities/dst.py generate */\n\n  jstz.olson.dst_rules = {\n    \"years\": [2008, 2009, 2010, 2011, 2012, 2013, 2014],\n    \"zones\": [{\n      \"name\": \"Africa/Cairo\",\n      \"rules\": [{\n        \"e\": 1219957200000,\n        \"s\": 1209074400000\n      }, {\n        \"e\": 1250802000000,\n        \"s\": 1240524000000\n      }, {\n        \"e\": 1285880400000,\n        \"s\": 1284069600000\n      }, false, false, false, {\n        \"e\": 1411678800000,\n        \"s\": 1406844000000\n      }]\n    }, {\n      \"name\": \"Africa/Casablanca\",\n      \"rules\": [{\n        \"e\": 1220223600000,\n        \"s\": 1212278400000\n      }, {\n        \"e\": 1250809200000,\n        \"s\": 1243814400000\n      }, {\n        \"e\": 1281222000000,\n        \"s\": 1272758400000\n      }, {\n        \"e\": 1312066800000,\n        \"s\": 1301788800000\n      }, {\n        \"e\": 1348970400000,\n        \"s\": 1345428000000\n      }, {\n        \"e\": 1382839200000,\n        \"s\": 1376100000000\n      }, {\n        \"e\": 1414288800000,\n        \"s\": 1406944800000\n      }]\n    }, {\n      \"name\": \"America/Asuncion\",\n      \"rules\": [{\n        \"e\": 1205031600000,\n        \"s\": 1224388800000\n      }, {\n        \"e\": 1236481200000,\n        \"s\": 1255838400000\n      }, {\n        \"e\": 1270954800000,\n        \"s\": 1286078400000\n      }, {\n        \"e\": 1302404400000,\n        \"s\": 1317528000000\n      }, {\n        \"e\": 1333854000000,\n        \"s\": 1349582400000\n      }, {\n        \"e\": 1364094000000,\n        \"s\": 1381032000000\n      }, {\n        \"e\": 1395543600000,\n        \"s\": 1412481600000\n      }]\n    }, {\n      \"name\": \"America/Campo_Grande\",\n      \"rules\": [{\n        \"e\": 1203217200000,\n        \"s\": 1224388800000\n      }, {\n        \"e\": 1234666800000,\n        \"s\": 1255838400000\n      }, {\n        \"e\": 1266721200000,\n        \"s\": 1287288000000\n      }, {\n        \"e\": 1298170800000,\n        \"s\": 1318737600000\n      }, {\n        \"e\": 1330225200000,\n        \"s\": 1350792000000\n      }, {\n        \"e\": 1361070000000,\n        \"s\": 1382241600000\n      }, {\n        \"e\": 1392519600000,\n        \"s\": 1413691200000\n      }]\n    }, {\n      \"name\": \"America/Goose_Bay\",\n      \"rules\": [{\n        \"e\": 1225594860000,\n        \"s\": 1205035260000\n      }, {\n        \"e\": 1257044460000,\n        \"s\": 1236484860000\n      }, {\n        \"e\": 1289098860000,\n        \"s\": 1268539260000\n      }, {\n        \"e\": 1320555600000,\n        \"s\": 1299988860000\n      }, {\n        \"e\": 1352005200000,\n        \"s\": 1331445600000\n      }, {\n        \"e\": 1383454800000,\n        \"s\": 1362895200000\n      }, {\n        \"e\": 1414904400000,\n        \"s\": 1394344800000\n      }]\n    }, {\n      \"name\": \"America/Havana\",\n      \"rules\": [{\n        \"e\": 1224997200000,\n        \"s\": 1205643600000\n      }, {\n        \"e\": 1256446800000,\n        \"s\": 1236488400000\n      }, {\n        \"e\": 1288501200000,\n        \"s\": 1268542800000\n      }, {\n        \"e\": 1321160400000,\n        \"s\": 1300597200000\n      }, {\n        \"e\": 1352005200000,\n        \"s\": 1333256400000\n      }, {\n        \"e\": 1383454800000,\n        \"s\": 1362891600000\n      }, {\n        \"e\": 1414904400000,\n        \"s\": 1394341200000\n      }]\n    }, {\n      \"name\": \"America/Mazatlan\",\n      \"rules\": [{\n        \"e\": 1225008000000,\n        \"s\": 1207472400000\n      }, {\n        \"e\": 1256457600000,\n        \"s\": 1238922000000\n      }, {\n        \"e\": 1288512000000,\n        \"s\": 1270371600000\n      }, {\n        \"e\": 1319961600000,\n        \"s\": 1301821200000\n      }, {\n        \"e\": 1351411200000,\n        \"s\": 1333270800000\n      }, {\n        \"e\": 1382860800000,\n        \"s\": 1365325200000\n      }, {\n        \"e\": 1414310400000,\n        \"s\": 1396774800000\n      }]\n    }, {\n      \"name\": \"America/Mexico_City\",\n      \"rules\": [{\n        \"e\": 1225004400000,\n        \"s\": 1207468800000\n      }, {\n        \"e\": 1256454000000,\n        \"s\": 1238918400000\n      }, {\n        \"e\": 1288508400000,\n        \"s\": 1270368000000\n      }, {\n        \"e\": 1319958000000,\n        \"s\": 1301817600000\n      }, {\n        \"e\": 1351407600000,\n        \"s\": 1333267200000\n      }, {\n        \"e\": 1382857200000,\n        \"s\": 1365321600000\n      }, {\n        \"e\": 1414306800000,\n        \"s\": 1396771200000\n      }]\n    }, {\n      \"name\": \"America/Miquelon\",\n      \"rules\": [{\n        \"e\": 1225598400000,\n        \"s\": 1205038800000\n      }, {\n        \"e\": 1257048000000,\n        \"s\": 1236488400000\n      }, {\n        \"e\": 1289102400000,\n        \"s\": 1268542800000\n      }, {\n        \"e\": 1320552000000,\n        \"s\": 1299992400000\n      }, {\n        \"e\": 1352001600000,\n        \"s\": 1331442000000\n      }, {\n        \"e\": 1383451200000,\n        \"s\": 1362891600000\n      }, {\n        \"e\": 1414900800000,\n        \"s\": 1394341200000\n      }]\n    }, {\n      \"name\": \"America/Santa_Isabel\",\n      \"rules\": [{\n        \"e\": 1225011600000,\n        \"s\": 1207476000000\n      }, {\n        \"e\": 1256461200000,\n        \"s\": 1238925600000\n      }, {\n        \"e\": 1288515600000,\n        \"s\": 1270375200000\n      }, {\n        \"e\": 1319965200000,\n        \"s\": 1301824800000\n      }, {\n        \"e\": 1351414800000,\n        \"s\": 1333274400000\n      }, {\n        \"e\": 1382864400000,\n        \"s\": 1365328800000\n      }, {\n        \"e\": 1414314000000,\n        \"s\": 1396778400000\n      }]\n    }, {\n      \"name\": \"America/Santiago\",\n      \"rules\": [{\n        \"e\": 1206846000000,\n        \"s\": 1223784000000\n      }, {\n        \"e\": 1237086000000,\n        \"s\": 1255233600000\n      }, {\n        \"e\": 1270350000000,\n        \"s\": 1286683200000\n      }, {\n        \"e\": 1304823600000,\n        \"s\": 1313899200000\n      }, {\n        \"e\": 1335668400000,\n        \"s\": 1346558400000\n      }, {\n        \"e\": 1367118000000,\n        \"s\": 1378612800000\n      }, {\n        \"e\": 1398567600000,\n        \"s\": 1410062400000\n      }]\n    }, {\n      \"name\": \"America/Sao_Paulo\",\n      \"rules\": [{\n        \"e\": 1203213600000,\n        \"s\": 1224385200000\n      }, {\n        \"e\": 1234663200000,\n        \"s\": 1255834800000\n      }, {\n        \"e\": 1266717600000,\n        \"s\": 1287284400000\n      }, {\n        \"e\": 1298167200000,\n        \"s\": 1318734000000\n      }, {\n        \"e\": 1330221600000,\n        \"s\": 1350788400000\n      }, {\n        \"e\": 1361066400000,\n        \"s\": 1382238000000\n      }, {\n        \"e\": 1392516000000,\n        \"s\": 1413687600000\n      }]\n    }, {\n      \"name\": \"Asia/Amman\",\n      \"rules\": [{\n        \"e\": 1225404000000,\n        \"s\": 1206655200000\n      }, {\n        \"e\": 1256853600000,\n        \"s\": 1238104800000\n      }, {\n        \"e\": 1288303200000,\n        \"s\": 1269554400000\n      }, {\n        \"e\": 1319752800000,\n        \"s\": 1301608800000\n      }, false, false, {\n        \"e\": 1414706400000,\n        \"s\": 1395957600000\n      }]\n    }, {\n      \"name\": \"Asia/Damascus\",\n      \"rules\": [{\n        \"e\": 1225486800000,\n        \"s\": 1207260000000\n      }, {\n        \"e\": 1256850000000,\n        \"s\": 1238104800000\n      }, {\n        \"e\": 1288299600000,\n        \"s\": 1270159200000\n      }, {\n        \"e\": 1319749200000,\n        \"s\": 1301608800000\n      }, {\n        \"e\": 1351198800000,\n        \"s\": 1333058400000\n      }, {\n        \"e\": 1382648400000,\n        \"s\": 1364508000000\n      }, {\n        \"e\": 1414702800000,\n        \"s\": 1395957600000\n      }]\n    }, {\n      \"name\": \"Asia/Dubai\",\n      \"rules\": [false, false, false, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Gaza\",\n      \"rules\": [{\n        \"e\": 1219957200000,\n        \"s\": 1206655200000\n      }, {\n        \"e\": 1252015200000,\n        \"s\": 1238104800000\n      }, {\n        \"e\": 1281474000000,\n        \"s\": 1269640860000\n      }, {\n        \"e\": 1312146000000,\n        \"s\": 1301608860000\n      }, {\n        \"e\": 1348178400000,\n        \"s\": 1333058400000\n      }, {\n        \"e\": 1380229200000,\n        \"s\": 1364508000000\n      }, {\n        \"e\": 1414098000000,\n        \"s\": 1395957600000\n      }]\n    }, {\n      \"name\": \"Asia/Irkutsk\",\n      \"rules\": [{\n        \"e\": 1224957600000,\n        \"s\": 1206813600000\n      }, {\n        \"e\": 1256407200000,\n        \"s\": 1238263200000\n      }, {\n        \"e\": 1288461600000,\n        \"s\": 1269712800000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Jerusalem\",\n      \"rules\": [{\n        \"e\": 1223161200000,\n        \"s\": 1206662400000\n      }, {\n        \"e\": 1254006000000,\n        \"s\": 1238112000000\n      }, {\n        \"e\": 1284246000000,\n        \"s\": 1269561600000\n      }, {\n        \"e\": 1317510000000,\n        \"s\": 1301616000000\n      }, {\n        \"e\": 1348354800000,\n        \"s\": 1333065600000\n      }, {\n        \"e\": 1382828400000,\n        \"s\": 1364515200000\n      }, {\n        \"e\": 1414278000000,\n        \"s\": 1395964800000\n      }]\n    }, {\n      \"name\": \"Asia/Kamchatka\",\n      \"rules\": [{\n        \"e\": 1224943200000,\n        \"s\": 1206799200000\n      }, {\n        \"e\": 1256392800000,\n        \"s\": 1238248800000\n      }, {\n        \"e\": 1288450800000,\n        \"s\": 1269698400000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Krasnoyarsk\",\n      \"rules\": [{\n        \"e\": 1224961200000,\n        \"s\": 1206817200000\n      }, {\n        \"e\": 1256410800000,\n        \"s\": 1238266800000\n      }, {\n        \"e\": 1288465200000,\n        \"s\": 1269716400000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Omsk\",\n      \"rules\": [{\n        \"e\": 1224964800000,\n        \"s\": 1206820800000\n      }, {\n        \"e\": 1256414400000,\n        \"s\": 1238270400000\n      }, {\n        \"e\": 1288468800000,\n        \"s\": 1269720000000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Vladivostok\",\n      \"rules\": [{\n        \"e\": 1224950400000,\n        \"s\": 1206806400000\n      }, {\n        \"e\": 1256400000000,\n        \"s\": 1238256000000\n      }, {\n        \"e\": 1288454400000,\n        \"s\": 1269705600000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Yakutsk\",\n      \"rules\": [{\n        \"e\": 1224954000000,\n        \"s\": 1206810000000\n      }, {\n        \"e\": 1256403600000,\n        \"s\": 1238259600000\n      }, {\n        \"e\": 1288458000000,\n        \"s\": 1269709200000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Yekaterinburg\",\n      \"rules\": [{\n        \"e\": 1224968400000,\n        \"s\": 1206824400000\n      }, {\n        \"e\": 1256418000000,\n        \"s\": 1238274000000\n      }, {\n        \"e\": 1288472400000,\n        \"s\": 1269723600000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Asia/Yerevan\",\n      \"rules\": [{\n        \"e\": 1224972000000,\n        \"s\": 1206828000000\n      }, {\n        \"e\": 1256421600000,\n        \"s\": 1238277600000\n      }, {\n        \"e\": 1288476000000,\n        \"s\": 1269727200000\n      }, {\n        \"e\": 1319925600000,\n        \"s\": 1301176800000\n      }, false, false, false]\n    }, {\n      \"name\": \"Australia/Lord_Howe\",\n      \"rules\": [{\n        \"e\": 1207407600000,\n        \"s\": 1223134200000\n      }, {\n        \"e\": 1238857200000,\n        \"s\": 1254583800000\n      }, {\n        \"e\": 1270306800000,\n        \"s\": 1286033400000\n      }, {\n        \"e\": 1301756400000,\n        \"s\": 1317483000000\n      }, {\n        \"e\": 1333206000000,\n        \"s\": 1349537400000\n      }, {\n        \"e\": 1365260400000,\n        \"s\": 1380987000000\n      }, {\n        \"e\": 1396710000000,\n        \"s\": 1412436600000\n      }]\n    }, {\n      \"name\": \"Australia/Perth\",\n      \"rules\": [{\n        \"e\": 1206813600000,\n        \"s\": 1224957600000\n      }, false, false, false, false, false, false]\n    }, {\n      \"name\": \"Europe/Helsinki\",\n      \"rules\": [{\n        \"e\": 1224982800000,\n        \"s\": 1206838800000\n      }, {\n        \"e\": 1256432400000,\n        \"s\": 1238288400000\n      }, {\n        \"e\": 1288486800000,\n        \"s\": 1269738000000\n      }, {\n        \"e\": 1319936400000,\n        \"s\": 1301187600000\n      }, {\n        \"e\": 1351386000000,\n        \"s\": 1332637200000\n      }, {\n        \"e\": 1382835600000,\n        \"s\": 1364691600000\n      }, {\n        \"e\": 1414285200000,\n        \"s\": 1396141200000\n      }]\n    }, {\n      \"name\": \"Europe/Minsk\",\n      \"rules\": [{\n        \"e\": 1224979200000,\n        \"s\": 1206835200000\n      }, {\n        \"e\": 1256428800000,\n        \"s\": 1238284800000\n      }, {\n        \"e\": 1288483200000,\n        \"s\": 1269734400000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Europe/Moscow\",\n      \"rules\": [{\n        \"e\": 1224975600000,\n        \"s\": 1206831600000\n      }, {\n        \"e\": 1256425200000,\n        \"s\": 1238281200000\n      }, {\n        \"e\": 1288479600000,\n        \"s\": 1269730800000\n      }, false, false, false, false]\n    }, {\n      \"name\": \"Pacific/Apia\",\n      \"rules\": [false, false, false, {\n        \"e\": 1301752800000,\n        \"s\": 1316872800000\n      }, {\n        \"e\": 1333202400000,\n        \"s\": 1348927200000\n      }, {\n        \"e\": 1365256800000,\n        \"s\": 1380376800000\n      }, {\n        \"e\": 1396706400000,\n        \"s\": 1411826400000\n      }]\n    }, {\n      \"name\": \"Pacific/Fiji\",\n      \"rules\": [false, false, {\n        \"e\": 1269698400000,\n        \"s\": 1287842400000\n      }, {\n        \"e\": 1327154400000,\n        \"s\": 1319292000000\n      }, {\n        \"e\": 1358604000000,\n        \"s\": 1350741600000\n      }, {\n        \"e\": 1390050000000,\n        \"s\": 1382796000000\n      }, {\n        \"e\": 1421503200000,\n        \"s\": 1414850400000\n      }]\n    }, {\n      \"name\": \"Europe/London\",\n      \"rules\": [{\n        \"e\": 1224982800000,\n        \"s\": 1206838800000\n      }, {\n        \"e\": 1256432400000,\n        \"s\": 1238288400000\n      }, {\n        \"e\": 1288486800000,\n        \"s\": 1269738000000\n      }, {\n        \"e\": 1319936400000,\n        \"s\": 1301187600000\n      }, {\n        \"e\": 1351386000000,\n        \"s\": 1332637200000\n      }, {\n        \"e\": 1382835600000,\n        \"s\": 1364691600000\n      }, {\n        \"e\": 1414285200000,\n        \"s\": 1396141200000\n      }]\n    }]\n  };\n\n  if ( true && typeof module.exports !== 'undefined') {\n    module.exports = jstz;\n  } else if ( true && __webpack_require__(/*! !webpack amd define */ \"B9Yq\") !== null && __webpack_require__(/*! !webpack amd options */ \"PDX0\") != null) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jstz;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {\n    if (typeof root === 'undefined') {\n      window.jstz = jstz;\n    } else {\n      root.jstz = jstz;\n    }\n  }\n})();\n\n//# sourceURL=webpack:///./node_modules/jstz/dist/jstz.js?");

/***/ }),

/***/ "xFjY":
/*!************************************!*\
  !*** ./node_modules/jstz/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./dist/jstz.js */ \"8i2W\");\n\n//# sourceURL=webpack:///./node_modules/jstz/index.js?");

/***/ })

}]);